<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>codelike</title><link href="https://codelike.com/" rel="alternate"></link><link href="https://codelike.com/feed/all.atom.xml" rel="self"></link><id>https://codelike.com/</id><updated>2020-03-29T18:00:00+02:00</updated><entry><title>A Corona Dashboard</title><link href="https://codelike.com/blog/2020/03/29/a-corona-dashboard/" rel="alternate"></link><published>2020-03-29T18:00:00+02:00</published><updated>2020-03-29T18:00:00+02:00</updated><author><name>Martin Stein</name></author><id>tag:codelike.com,2020-03-29:/blog/2020/03/29/a-corona-dashboard/</id><summary type="html">&lt;p&gt;Many people probably have seen the informative dashboard for visualizing the spread of the coronavirus, developed by
&lt;a class="reference external" href="https://systems.jhu.edu/"&gt;JHU CSSE&lt;/a&gt;
(&lt;a class="reference external" href="https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6"&gt;link&lt;/a&gt;).
The amazing folks at JHU CSSE also provide their data in a repository at
&lt;a class="reference external" href="https://github.com/CSSEGISandData/COVID-19"&gt;Github&lt;/a&gt;, that is updated every 24 hours. Besides that dashboard,
we have the &lt;a class="reference external" href="https://www.worldometers.info/coronavirus/"&gt;Worldometers&lt;/a&gt; site as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many people probably have seen the informative dashboard for visualizing the spread of the coronavirus, developed by
&lt;a class="reference external" href="https://systems.jhu.edu/"&gt;JHU CSSE&lt;/a&gt;
(&lt;a class="reference external" href="https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6"&gt;link&lt;/a&gt;).
The amazing folks at JHU CSSE also provide their data in a repository at
&lt;a class="reference external" href="https://github.com/CSSEGISandData/COVID-19"&gt;Github&lt;/a&gt;, that is updated every 24 hours. Besides that dashboard,
we have the &lt;a class="reference external" href="https://www.worldometers.info/coronavirus/"&gt;Worldometers&lt;/a&gt; site as another
great resource to stay informed about the developments in different countries.&lt;/p&gt;
&lt;p&gt;In the past couple of weeks I have noticed myself jumping between these two sources constantly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I liked the information density of the JHU CSSE-dashboard where you could see a lot at a quick glance.&lt;/li&gt;
&lt;li&gt;I liked the worldometers chart presentation, especially because it allows you to see the development of
&lt;strong&gt;new cases per day&lt;/strong&gt; in a nice diagram.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did wish there was a way to have both at the same time plus a way to compare those charts for different countries.
My free-time lately was mostly spent at home, so I used the last ten days to build a tool
to &amp;quot;scratch my own itch&amp;quot;. The result of that work is now online as a dashboard at
&lt;a class="reference external" href="https://codelike.com/corona-dashboard/"&gt;https://codelike.com/corona-dashboard/&lt;/a&gt;. The initial number one complaint
of my friends was: &amp;quot;Make it mobile-ready!&amp;quot;, so this weekend I added a responsive approach that allows you to see
the two main sections:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;side-by-side on larger screen sizes.&lt;/li&gt;
&lt;li&gt;in a tabbed UI on smaller screen sizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am continuously trying to improve the dashboard, so if you have any suggestions or feedback, feel
free to contact me (email in the About-section). It might take me a bit to reply and/or to incorporate any
changes due to my day job, but I appreciate any messages and will do my best.&lt;/p&gt;
</content><category term="misc"></category><category term="typescript"></category><category term="data-visualization"></category></entry><entry><title>How to Serialize SQLALchemy Objects to JSON in Pyramid</title><link href="https://codelike.com/blog/2015/07/19/how-to-serialize-sqlalchemy-objects-to-json-in-pyramid/" rel="alternate"></link><published>2015-07-19T15:35:00+02:00</published><updated>2015-07-19T15:35:00+02:00</updated><author><name>Martin Stein</name></author><id>tag:codelike.com,2015-07-19:/blog/2015/07/19/how-to-serialize-sqlalchemy-objects-to-json-in-pyramid/</id><summary type="html">&lt;p&gt;So you are working on the backend for a single-page application in
Pyramid and need to serialize all kinds of objects to JSON? In this post
we'll work our way up from the basic JSON-serialization built into Pyramid
to a powerful approach for serializing SQLAlchemy objects.&lt;/p&gt;
&lt;div class="section" id="serializing-simple-data-structures"&gt;
&lt;h2&gt;Serializing Simple Data Structures …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;So you are working on the backend for a single-page application in
Pyramid and need to serialize all kinds of objects to JSON? In this post
we'll work our way up from the basic JSON-serialization built into Pyramid
to a powerful approach for serializing SQLAlchemy objects.&lt;/p&gt;
&lt;div class="section" id="serializing-simple-data-structures"&gt;
&lt;h2&gt;Serializing Simple Data Structures&lt;/h2&gt;
&lt;p&gt;Pyramid comes with this great concept called &lt;a class="reference external" href="http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/renderers.html#renderers"&gt;renderers&lt;/a&gt;:
You simply return data from your view function (other MVC frameworks
call this part the controller) and the renderer is responsible for turning the
data into reasonable output. The renderer might be a jinja-template that
uses the data to render some HTML result. But in this post we are interested
in Pyramid's built-in JSON renderer, which already knows how to deal with Python's
basic types. The view below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;

&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_basic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_basic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;friend_ids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will automatically be turned into the JSON structure that we would expect
(formatted nicely for this post):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;friend_ids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the JSON-renderer already knows how to deal with dictionaries,
strings, integers, ... . It uses Python's built-in &lt;tt class="docutils literal"&gt;json&lt;/tt&gt; library, so it knows
how to deal with Python's basic data types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="serializing-custom-obects"&gt;
&lt;h2&gt;Serializing Custom Obects&lt;/h2&gt;
&lt;p&gt;Sooner or later, you will want to serialize an object where the JSON-renderer
doesn't know what to do with it. When I start a new project, the very first
case where this happens is usually Python's &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; instances. Because
of the additional datetime-object, the following won't work... yet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_custom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_custom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;friend_ids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we'll get so far is an error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="n"&gt;serializable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One way to tell Pyramid how to serialize an object to JSON is to add a
&lt;tt class="docutils literal"&gt;__json__&lt;/tt&gt;-method to the relevant class. We'll look at that option later.
In the Python world, it is
generally frowned upon to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Monkey_patch"&gt;monkey patch&lt;/a&gt; additional attributes to classes from the outside. &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; is an object
from the standard library, so we definitely should not extend that with
a magic &lt;tt class="docutils literal"&gt;__json__&lt;/tt&gt; method. That would be bad style.&lt;/p&gt;
&lt;p&gt;For these cases (where we do not want to or cannot modify existing code), we
can use Pyramid`s &lt;a class="reference external" href="http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/renderers.html#using-the-add-adapter-method-of-a-custom-json-renderer"&gt;add_adapter&lt;/a&gt;  functionality. Let's use that in a file called
&lt;tt class="docutils literal"&gt;jsonexample/util/jsonhelpers&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_json_renderer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a custom json renderer that can deal with some datetime objects.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;datetime_adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;time_adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;json_renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;json_renderer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime_adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json_renderer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_renderer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That way we tell Pyramid to use the given functions &lt;tt class="docutils literal"&gt;datetime_adapter&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;time_adapter&lt;/tt&gt; for turning objects of type &lt;tt class="docutils literal"&gt;datetime.datetime&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;datetime.time&lt;/tt&gt; into JSON. The only thing missing is to make Pyramid
actually use our custom renderer. That happens in our main &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.util.jsonhelpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_json_renderer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_renderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;custom_json_renderer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with that, our object is turned into the JSON we want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;friend_ids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2015-01-23T16:02:15&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="serialization-of-sqlalchemy-objects-with-json"&gt;
&lt;h2&gt;Serialization of SQLAlchemy Objects with __json__&lt;/h2&gt;
&lt;p&gt;If you're working with Pyramid, it is likely that you'll also be using
&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;http://www.sqlalchemy.org/&lt;/a&gt;. If yes, Pyramid
will not know out of the box how to serialize SQLAlchemy-mapped objects
to JSON. Let's assume we have this model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;super_hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;coupled with this view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sqlalchemy_simple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_sqlalchemy_simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, we'll get a &lt;tt class="docutils literal"&gt;TypeError: &amp;lt;jsonexample.models.User object at 0x0464A4D0&amp;gt; is not JSON serializable&lt;/tt&gt; when we call the new view. This time, we will use Pyramid's
&lt;a class="reference external" href="http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/renderers.html#using-a-custom-json-method"&gt;other option&lt;/a&gt; for JSON-serialization: We add a
&lt;tt class="docutils literal"&gt;__json__&lt;/tt&gt;-method to the relevant class that transforms our object
into something usable. We can do that for all SQLAlchemy-models by
extending the &lt;tt class="docutils literal"&gt;Base&lt;/tt&gt; class that our models inherit from.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__json__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;json_exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__json_exclude__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="c1"&gt;# Do not serialize &amp;#39;private&amp;#39; attributes&lt;/span&gt;
                &lt;span class="c1"&gt;# (SQLAlchemy-internal attributes are among those, too)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;json_exclude&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our new &lt;tt class="docutils literal"&gt;Base&lt;/tt&gt; class transforms our model-instances into a Python
dict by iterating over the internal &lt;tt class="docutils literal"&gt;__dict__&lt;/tt&gt; of the model. Note that
SQLAlchemy stores its internal data in an attribute called
&lt;tt class="docutils literal"&gt;_sa_instance_state&lt;/tt&gt;. We want to avoid serializing that and
other private attributes starting with &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;, so we exclude those
from the result.&lt;/p&gt;
&lt;p&gt;Very often there are other specific attributes of your models that should
not be serialized to JSON either. Imagine a password-hash
field of your User-objects or other data that should not be public.
For this case the above Base class allows you to exclude certain
attribute by adding their names to &lt;tt class="docutils literal"&gt;__json_exclude__&lt;/tt&gt;. Let's say that
&lt;tt class="docutils literal"&gt;created_at&lt;/tt&gt; is an internal attribute that shouldn't be serialized
for our public API. Here's what that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;__json_exclude__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;super_hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our Base class together with our &lt;tt class="docutils literal"&gt;__json_exclude__&lt;/tt&gt; gives us the following
JSON-result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-serialization-with-marshmallow"&gt;
&lt;h2&gt;Advanced Serialization with Marshmallow&lt;/h2&gt;
&lt;p&gt;The __json__-approach above is alright for basic cases, but falls short
in more demanding situations. Imagine these:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Depending on the chosen route or view method, you want to serialize
an object with or without its attached relationships.&lt;/li&gt;
&lt;li&gt;Perhaps the client-side should be able to specify with a GET-parameter
whether they want the attached relationships or only the central
object.&lt;/li&gt;
&lt;li&gt;Depending on the currently logged in user, you
want to serialize the full SQLAlchemy-mapped object (for admin users) or
a reduced set of attributes only (for normal users).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In all three cases, our approach with &lt;tt class="docutils literal"&gt;__json_exclude__&lt;/tt&gt; is not enough,
because the excluded attributes are hard-coded per class.
Cases two and three are even more challenging because the decision which
attributes must be serialized happens at runtime. At this point, the
&lt;a class="reference external" href="http://marshmallow.readthedocs.org"&gt;marshmallow&lt;/a&gt; library comes in very
handy. marshmallow allows you to specify a schema for serializing/deserializing
objects to/from JSON. We are interested in the serialization part. For
this part, you want the 2.0-version of marshmallow, which is still in
beta but very much usable.&lt;/p&gt;
&lt;p&gt;The marshmallow docs start with an example like this for defining a schema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;marshmallow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArtistSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AlbumSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;release_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArtistSchema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That looks alright, but the parts with &lt;tt class="docutils literal"&gt;fields.Str()&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;fields.Date()&lt;/tt&gt;/...
would mean we have to duplicate lots of information
from our User-model above. We have already defined &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; as a string-column
for SQLAlchemy, we don't to define it again as field &lt;tt class="docutils literal"&gt;fields.Str()&lt;/tt&gt; for
marshmallow. Fortunately, there's a shorter
way to declare a schema with marshmallow. In our case, that would simply be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;marshmallow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now explicitly include or exclude attributes from serialization, for
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;full_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# {&amp;#39;created_at&amp;#39;: &amp;#39;2015-07-19T18:09:13.875568+00:00&amp;#39;,&lt;/span&gt;
&lt;span class="c1"&gt;#  &amp;#39;name&amp;#39;: &amp;#39;Bruce Wanye&amp;#39;, &amp;#39;super_hero&amp;#39;: True, &amp;#39;id&amp;#39;: 1}&lt;/span&gt;

&lt;span class="c1"&gt;# You can blacklist certain attributes&lt;/span&gt;
&lt;span class="n"&gt;reduced_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reduced_schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# {&amp;#39;name&amp;#39;: &amp;#39;Bruce Wanye&amp;#39;, &amp;#39;super_hero&amp;#39;: True}&lt;/span&gt;

&lt;span class="c1"&gt;# Or whitelist attributes&lt;/span&gt;
&lt;span class="n"&gt;other_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;super_hero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;other_schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# {&amp;#39;name&amp;#39;: &amp;#39;Bruce Wanye&amp;#39;, &amp;#39;super_hero&amp;#39;: True}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An initial approach might be to use such a schema directly in the view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sqlalchemy_marshmallow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_sqlalchemy_marshmallow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Now we select the schema and which fields to be included/excluded&lt;/span&gt;
    &lt;span class="c1"&gt;# based on some runtime condition. Imagine a test if the currently&lt;/span&gt;
    &lt;span class="c1"&gt;# logged in user is admin or not.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we can decide during runtime which attributes we'd like
to include or exclude, which is very nice. It's not part of our example,
but marshmallow works nicely for nested attributes (e.g.
SQLAlchemy-relationships), too. You should read the marshmallow-docs about
&lt;a class="reference external" href="http://marshmallow.readthedocs.org/en/latest/nesting.html"&gt;Nesting Schemas&lt;/a&gt;
for that.&lt;/p&gt;
&lt;p&gt;There's still one problem: marshmallow has its own way of rendering all
those fields, for example datetime-objects. All the JSON-adapters we defined
earlier won't be used by marshmallow. That's bad because then we get
different serializations of datetime-objects depending on whether we
use marshmallow in a view or not. So how can we force marshmallow not
to use its internal type-mappings? That's pretty easy. We override the
type mappings and use that schema as the basis of our user-schema instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# in util/jsonhelpers.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RenderSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Schema to prevent marshmallow from using its default type mappings.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;TYPE_MAPPING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="c1"&gt;# In models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RenderSchema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-of-marshmallow-into-json-renderer"&gt;
&lt;h2&gt;Integration of Marshmallow into JSON-Renderer&lt;/h2&gt;
&lt;p&gt;The marshmallow-approach above is nice and clean, but there are two things
that I'm not completely happy about:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You have to do the part with &lt;tt class="docutils literal"&gt;data, errors = schema.dump(some_obj)&lt;/tt&gt; in every
view where you want to use marshmallow.&lt;/li&gt;
&lt;li&gt;I really like that Pyramid lets you return domain-objects from
your views and the renderer turns it into the final result, because
that's very nice for unit-testing: You can directly inspect the
returned objects in your unit tests. However, in the marshmallow approach
above you don't return your actual SQLAlchemy-objects anymore.
Instead you return the  &lt;tt class="docutils literal"&gt;data&lt;/tt&gt; dict created by marshmallow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wouldn't it be nice if you could return your SQLAlchemy-objects as usual
and the renderer knew how to transform it into JSON based on a marshmallow
schema? There is a way, though it's a bit tricky and relies
on Pyramid internals. If you use this, be advised that it might break
on Pyramid version updates and is not officially supported.&lt;/p&gt;
&lt;p&gt;Still, I like the approach for using it in Pyramid views so much that I
want to post this, too. First, we directly inherit from Pyramid's
JSON-renderer as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SchemaJsonRenderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Extends Pyramid&amp;#39;s JSON renderer with marshmallow-serialization.&lt;/span&gt;

&lt;span class="sd"&gt;    When a view-method defines a marshmallow Schema as request.render_schema,&lt;/span&gt;
&lt;span class="sd"&gt;    that schema will be used for serializing the return value.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        If a schema is present, replace value with output from schema.dump(..).&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;original_render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;schema_render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;render_schema&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPInternalServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Serialization failed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;original_render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;schema_render&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, if you want to use a certain schema for rendering your output, simply
attach it to &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; as &lt;tt class="docutils literal"&gt;request.render_schema&lt;/tt&gt; in your view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;marshmallow_integrated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_marshmallow_integrated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that I've defined the &lt;tt class="docutils literal"&gt;SchemaJsonRenderer&lt;/tt&gt; as renderer &lt;tt class="docutils literal"&gt;json2&lt;/tt&gt; in
__init__.py, so the code for our example can use both renderers separately.
And just like that (yes, I know, it took a while) you can render your
SQLAlchemy-objects to JSON simply by attaching a schema as
&lt;tt class="docutils literal"&gt;request.render_schema&lt;/tt&gt; in your view.&lt;/p&gt;
&lt;p&gt;By the way, you can find the complete source-code of this blog post at:
&lt;a class="reference external" href="https://github.com/martinstein/json-example"&gt;https://github.com/martinstein/json-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The commits follow the narrative of this post so you can follow step by step
if you want. The most up to date commit contains all the approaches mentioned
above. They are available at the routes &lt;tt class="docutils literal"&gt;&amp;quot;basic&amp;quot;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;quot;custom&amp;quot;&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;&amp;quot;sqlalchemy_simple&amp;quot;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;quot;sqlalchemy_marshmallow&amp;quot;&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&amp;quot;marshmallow_integrated&amp;quot;&lt;/tt&gt;.
When you clone the repository, don't forget to run these commands once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# instead of the next line, you can also use: pip install -e .&lt;/span&gt;
python setup.py develop
initialize_json-example_db development.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then simply run your local server with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pserve development.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The source-code of the repository is not necessarily structured in a way
that you would/should structure a larger project. For example, I wouldn't
normally put all SQLAlchemy-related classes in a single &lt;tt class="docutils literal"&gt;models.py&lt;/tt&gt; file.
However, I've kept the code structure intentionally simple for this example to
demonstrate the concepts.&lt;/p&gt;
&lt;p&gt;Hope this post could help some of you. Feel free to contact me if you have
further questions or suggestions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="python"></category><category term="pyramid"></category><category term="sqlalchemy"></category></entry><entry><title>A REST API with Python and Pyramid</title><link href="https://codelike.com/blog/2014/04/27/a-rest-api-with-python-and-pyramid/" rel="alternate"></link><published>2014-04-27T15:05:00+02:00</published><updated>2014-04-27T15:05:00+02:00</updated><author><name>Martin Stein</name></author><id>tag:codelike.com,2014-04-27:/blog/2014/04/27/a-rest-api-with-python-and-pyramid/</id><summary type="html">&lt;p&gt;Lately, I've had to develop REST APIs for several projects, sometimes in Java
and sometimes in Python. Web services for a typical
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt;
API usually have pretty much the same elements. Sooner or later that makes
you think about how to reuse your code for different REST resources.
I'm going …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately, I've had to develop REST APIs for several projects, sometimes in Java
and sometimes in Python. Web services for a typical
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt;
API usually have pretty much the same elements. Sooner or later that makes
you think about how to reuse your code for different REST resources.
I'm going to explain the approach that I've used for my latest Pyramid
project. Let's take blog posts as a simple example:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;/posts&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;fetches a list of blog posts.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/{id}&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;reads a single post with the given ID.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;/posts&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;inserts a new post into the &lt;tt class="docutils literal"&gt;posts&lt;/tt&gt; collection.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PUT&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/{id}&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;updates the post with the given ID.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;DELETE&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/posts/{id}&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;deletes the given post.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Let's say we add two routes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts_collection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/posts/&lt;/span&gt;&lt;span class="si"&gt;{id}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, a fairly basic implementation of the web services might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.httpexceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPOk&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_defaults&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sampleproject.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostSchema&lt;/span&gt;

&lt;span class="nd"&gt;@view_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
        &lt;span class="c1"&gt;# Only load a single blog post when we have a post id:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matched_route&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;post_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matchdict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts_collection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts_collection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Flush to get the post.id from the database&lt;/span&gt;
        &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;

    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;

    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# update the post data&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;

    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HTTPOk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above uses &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; as ORM
and &lt;a class="reference external" href="http://docs.pylonsproject.org/projects/colander/en/latest/"&gt;Colander&lt;/a&gt;
schema to validate incoming data. Changes to the threaded DBSession are
automatically committed at the end of each request (in case you're wondering
about the lack of &lt;tt class="docutils literal"&gt;DBSession.commit()&lt;/tt&gt; statements.)&lt;/p&gt;
&lt;div class="section" id="the-challenge"&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;After a while you might need similar API code for comments, attachments,
users or something else. You could simply repeat the code above and replace
&lt;tt class="docutils literal"&gt;Post&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;Attachment&lt;/tt&gt;, the &lt;tt class="docutils literal"&gt;'posts'&lt;/tt&gt; route with an
&lt;tt class="docutils literal"&gt;'attachments'&lt;/tt&gt; route and so on. But that kind of code repetition is bad.
So, in a good
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; manner,
let's extract the common code to a base class to make it re-usable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# all your imports&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;item_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# Override this in child views&lt;/span&gt;
    &lt;span class="n"&gt;schema_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# Override this in child views&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
        &lt;span class="c1"&gt;# Don&amp;#39;t load a single item for the collection route&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matched_route&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;item_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matchdict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema_cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema_cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;DBSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HTTPOk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea is that we can now simply write this in our child classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;item_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
    &lt;span class="n"&gt;schema_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSchema&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the CRUD services are inherited from &lt;tt class="docutils literal"&gt;BaseView&lt;/tt&gt;. But guess what, it
won't work like this. We have to connect our view methods
to our routes somehow, otherwise nothing happens at all. My first idea was to
decorate the methods in &lt;tt class="docutils literal"&gt;BaseView&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema_cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then simply decorate the actual &lt;tt class="docutils literal"&gt;PostView&lt;/tt&gt; with a &lt;tt class="docutils literal"&gt;view_defaults&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;item_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
    &lt;span class="n"&gt;schema_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSchema&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hoping that Pyramid would merge the route in the &lt;tt class="docutils literal"&gt;view_defaults&lt;/tt&gt; with
the request methods in the parent &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt;.
But that does not work either. It seems that Pyramid doesn't recognize
&lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt; when it's only applied in parent classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;So, how can we register our views without repeating &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt;
for every single method in every child view? The answer is: We build
ourselves a custom decorator called &lt;tt class="docutils literal"&gt;register_views&lt;/tt&gt; that does
all the &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt; work for us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;register_views&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collection_route&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collection_route&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;update_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delete_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;list_items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_route&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_route&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, we can create child views with a small snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@register_views&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collection_route&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts_collection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;item_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
    &lt;span class="n"&gt;schema_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSchema&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-explanation"&gt;
&lt;h2&gt;The Explanation&lt;/h2&gt;
&lt;p&gt;A short explanation of what &lt;tt class="docutils literal"&gt;register_views&lt;/tt&gt; does:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt; decorator is applied imperatively, which means&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_parameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is replaced with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_parameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Instead of decorating every single method, we can apply &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt;
to the class itself with a parameter &lt;tt class="docutils literal"&gt;attr&lt;/tt&gt; that specifies which
method we want to register. Thus,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;We need to know two different routes for every child class. These are
passed as arguments to the decorator and will be available in the
&lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt; constructor of the decorator:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@register_views&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collection_route&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posts_collection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;The approach above applies the &lt;tt class="docutils literal"&gt;view_config&lt;/tt&gt; decorator &lt;strong&gt;within&lt;/strong&gt; another
decorator/function. In Pyramid that is tricky because it uses
&lt;a class="reference external" href="https://pypi.python.org/pypi/venusian"&gt;Venusian&lt;/a&gt; to do some decorator
magic (which is rather advanced and which I haven't grasped fully yet).
In order to tell Pyramid
that our decorators are nested one level deep, we need to add the
&lt;tt class="docutils literal"&gt;_depth=1&lt;/tt&gt; parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the end, that gives us this approach for the core of our
&lt;tt class="docutils literal"&gt;register_views&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;hr class="docutils" /&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/PythonDecorators.html"&gt;Python Decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;Python Decorators II: Decorator Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Pylons/pyramid/issues/637"&gt;Pyramid GitHub issue about depth argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="python"></category><category term="pyramid"></category></entry><entry><title>How to Make Your Open-Source Project Successful</title><link href="https://codelike.com/blog/2013/04/21/how-to-make-your-open-source-project-successful/" rel="alternate"></link><published>2013-04-21T16:04:00+02:00</published><updated>2013-04-21T16:04:00+02:00</updated><author><name>Martin Stein</name></author><id>tag:codelike.com,2013-04-21:/blog/2013/04/21/how-to-make-your-open-source-project-successful/</id><summary type="html">&lt;p&gt;The 'better' an open source project is technically, the more people use it.
That's what I used to think. But lately I have gotten doubts:  Why are some
projects more successful than others? Are there technical reasons
or is it something else? How do some get 10000 Github followers and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The 'better' an open source project is technically, the more people use it.
That's what I used to think. But lately I have gotten doubts:  Why are some
projects more successful than others? Are there technical reasons
or is it something else? How do some get 10000 Github followers and others
languish in obscurity? I was hoping there would be a nice, clear answer.
I think there is - unfortunately not the one I was hoping for.&lt;/p&gt;
&lt;p&gt;But why should we care at all how many people use a certain framework or
library?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A project with more users will receive more bug reports from its users.
Some of those users will contribute even more to the project, so it
will get more patches and feature enhancements. It will be more battle-tested
and grow faster.&lt;/li&gt;
&lt;li&gt;More users, more tutorials, more blog posts, more Stackoverflow questions
means the learning experience will be better.&lt;/li&gt;
&lt;li&gt;The potential for the project creators, contributors and users to make a living
off of it will increase. Let's take web application frameworks:
How many jobs do you know that require &amp;quot;Pyramid&amp;quot; expertise? How many jobs
are &amp;quot;Django&amp;quot; related? On the
&lt;a class="reference external" href="http://www.python.org/community/jobs/"&gt;Python Job Board&lt;/a&gt; I count
6 mentions of Pyramid. For Django, I stopped counting at 30+ halfway down the
page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in any one area, there are only so many developers available. Yes, the
world is big enough for multiple projects in the same space, but in the end,
software projects compete for developer attention. A few projects will
dominate and have the biggest user base. These projects &amp;quot;win&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let's take a closer look and compare the situation for some software libraries.
Of course, if an open source project wants to be a serious contender, it
should offer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an okay feature-set&lt;/li&gt;
&lt;li&gt;in a package that is not totally buggy&lt;/li&gt;
&lt;li&gt;with a minimum of documentation (the days of &amp;quot;just read the source&amp;quot;
are over.)&lt;/li&gt;
&lt;li&gt;and a reasonable license (something like AGPL is an instant no-go for lots
of people.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's view these as necessary requirements (in the mathematical
sense), but not sufficient ones.&lt;/p&gt;
&lt;p&gt;Also, in this whole post I'm talking about &lt;em&gt;software libraries&lt;/em&gt; -
stuff meant to be used by other developers - but I'm excluding programming
languages. The popularity of languages is strongly influenced by other, major
factors. Take JavaScript, which rises steadily mostly because of a single
fact: It is present in all browsers. Circumstances like that make it hard to
draw useful general conclusions. Therefore, let's not talk about languages.&lt;/p&gt;
&lt;p&gt;So, what makes a software project successful?&lt;/p&gt;
&lt;div class="section" id="the-one-which-is-easier-to-use-wins"&gt;
&lt;h2&gt;1) The one which is easier to use wins&lt;/h2&gt;
&lt;p&gt;For instance, &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is easier to use out
of the box than &lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;Pyramid&lt;/a&gt;:
It has a nice admin interface, the model and form validation libraries are
already included and everything fits together nicely.
&lt;a class="reference external" href="http://jquery.com/"&gt;jQuery&lt;/a&gt; supports the
theory, too. Most will agree that it is more beginner-friendly
than, say, &lt;a class="reference external" href="http://dojotoolkit.org/"&gt;Dojo&lt;/a&gt; or
&lt;a class="reference external" href="http://yuilibrary.com/"&gt;YUI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the theory does not hold, with two rather big counter-examples: First,
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; and &lt;a class="reference external" href="http://git-scm.com/"&gt;Git&lt;/a&gt;.
Some might find Git &lt;a class="reference external" href="https://git.wiki.kernel.org/index.php/GitSurvey2011#05._Have_you_found_Git_easy_to_use.3F"&gt;reasonably easy&lt;/a&gt;
to use, but the majority of people that have used both find
Mercurial
&lt;a class="reference external" href="http://stevelosh.com/blog/2010/01/the-real-difference-between-mercurial-and-git/"&gt;easier&lt;/a&gt;
to &lt;a class="reference external" href="http://steveko.wordpress.com/2012/02/24/10-things-i-hate-about-git/"&gt;deal&lt;/a&gt;
&lt;a class="reference external" href="http://programmers.stackexchange.com/questions/87217/why-is-mercurial-considered-to-be-easier-than-git"&gt;with&lt;/a&gt;.
And yet, it didn't win the race against Git. Then there is
&lt;a class="reference external" href="http://backbonejs.org/"&gt;Backbone&lt;/a&gt; and its
competitors &lt;a class="reference external" href="http://knockoutjs.com/"&gt;Knockout&lt;/a&gt; and
&lt;a class="reference external" href="http://angularjs.org/"&gt;Angular&lt;/a&gt;. Backbone is significantly more popular
(just compare their Github followers or look at the
&lt;a class="reference external" href="http://backbonejs.org/#examples"&gt;projects that use Backbone&lt;/a&gt;)
even though it's harder to use. Some might disagree with that last claim,
so let's look at hard numbers: The poster application for JS frameworks -
the &lt;a class="reference external" href="http://addyosmani.github.com/todomvc/"&gt;ToDo app&lt;/a&gt; - requires way more code
in Backbone than Angular or Knockout. And a personal data point: For a recent project
I had to rewrite an old application and replaced Backbone with Angular. The JavaScript
code size dropped from 2.5K lines of code to around 600. A large
part of that can be attributed to the change in JS libraries.&lt;/p&gt;
&lt;p&gt;Another theory then...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-faster-runtime-performance-wins"&gt;
&lt;h2&gt;2) The faster runtime performance wins&lt;/h2&gt;
&lt;p&gt;We all know that Git has pretty much won the popularity contest against Mercurial.
And it is somewhat faster than the latter, so that fits (quick googling gives:
&lt;a class="reference external" href="http://draketo.de/proj/hg-vs-git-server/test-results.html"&gt;http://draketo.de/proj/hg-vs-git-server/test-results.html&lt;/a&gt;,
&lt;a class="reference external" href="http://xrunhprof.wordpress.com/2011/04/11/mercurial-vs-git-performance/"&gt;http://xrunhprof.wordpress.com/2011/04/11/mercurial-vs-git-performance/&lt;/a&gt;,
&lt;a class="reference external" href="http://laserjock.wordpress.com/2008/05/09/bzr-git-and-hg-performance-on-the-linux-tree/"&gt;http://laserjock.wordpress.com/2008/05/09/bzr-git-and-hg-performance-on-the-linux-tree/&lt;/a&gt;
).&lt;/p&gt;
&lt;p&gt;People also like to say that Backbone is more lightweight and faster than
the likes of Knockout and &lt;a class="reference external" href="http://emberjs.com/"&gt;Ember&lt;/a&gt;.
Jeremy Ashkenas, Backbone's creator, posted
a benchmark to Hacker News showing how much faster it is than Ember
(&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3616820"&gt;http://news.ycombinator.com/item?id=3616820&lt;/a&gt;). However, the benchmark
was somewhat artificial, and you might notice a link between who created the
benchmark and which framework is shown in a favorable light.&lt;/p&gt;
&lt;p&gt;But still, the public perception is that Backbone has a faster runtime
performance and it lets you tweak and optimize things better. So that's why it is
more popular than Ember, Angular and so on, right?&lt;/p&gt;
&lt;p&gt;But wait, what about Rails? For a long
time, everybody's favorite Ruby web framework had a reputation of being slow. I
am too lazy to come up with examples, but if you don't believe me, just google
'Rails slow' or 'Rails doesn't scale'. Here is a small benchmark:
&lt;a class="reference external" href="http://blog.curiasolutions.com/the-great-web-framework-shootout/"&gt;http://blog.curiasolutions.com/the-great-web-framework-shootout/&lt;/a&gt;.
And yet Rails got hugely popular and it single-handedly
catapulted Ruby into the group of mainstream languages. Or what about
Pylons/Pyramid compared to Django? The benchmark above also shows
Pyramid as faster than Django. Yet, Django's community is probably an order of
magnitude larger than Pyramid's.&lt;/p&gt;
&lt;p&gt;So this theory holds neither. What about the next one?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-more-hacker-like-one-wins"&gt;
&lt;h2&gt;3) The more &amp;quot;hacker-like&amp;quot; one wins.&lt;/h2&gt;
&lt;p&gt;I don't have an exact definition of &amp;quot;hacker-like&amp;quot;, so let me try to describe it:
The software that let's you fiddle and tweak more. The software that is closer
to the metal and uses less high-level magic. The software that might require you
to write more low-level commands, but in turn, you know exactly what's happening.&lt;/p&gt;
&lt;p&gt;Again we could come up with Git and Backbone in support of the theory. But
again, the counter examples are similar: Rails and Django are both more
monolithic and their structure is more rigid than Pylons/Pyramid. If you have special
requirements, hacking and adapting a Pyramid project would be easier than
bending Django into the shape you need. Yet, Rails and Django are far bigger.&lt;/p&gt;
&lt;p&gt;You could also argue that YUI stays closer to &amp;quot;normal&amp;quot;
Javascript as jQuery, which is almost like its own little
mini-language on top of Javascript. Rumour has it that some fledgling web developers
even skip the whole Javascript part and only learn to use jQuery. So jQuery
is more removed from Javascript and more high-level, alright. That hasn't stopped it
from getting hugely popular at all.&lt;/p&gt;
&lt;p&gt;Getting impatient yet? Wondering when the heck I'll come to the point? Okay,
here it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-one-created-earlier-wins"&gt;
&lt;h2&gt;4) The one created earlier wins.&lt;/h2&gt;
&lt;p&gt;&amp;quot;Are you kidding me?&amp;quot; you're probably thinking right now. &amp;quot;So you're
saying all that technical stuff doesn't matter? Ease-of-use? Runtime performance?
Hackability?&amp;quot; Well, let's look at some facts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rails basically started the trend of modern MVC-frameworks in 2004. When it
arrived, there was no other framework like it and it took the throne of
most popular web framework by storm.&lt;/li&gt;
&lt;li&gt;Git was released before Mercurial.&lt;/li&gt;
&lt;li&gt;Backbone was the first of the new breed of Javascript frameworks. Angular,
Knockout, Ember, Batman, you name it - they all came later.&lt;/li&gt;
&lt;li&gt;Within the Python world, Django came first in July 2005, Turbogears second
and Pylons third. Django has kept its lead in popularity ever since.&lt;/li&gt;
&lt;li&gt;Twitter Bootstrap arrived on the scene one month before Zurb's Foundation.
At this very moment, it has 48.800 followers on Github versus the
10.800 for the latter. To be fair, it seems that Bootstrap got inspired
heavily by ZURB's work done before (&lt;a class="reference external" href="http://news.ycombinator.com/item?id=4588826"&gt;http://news.ycombinator.com/item?id=4588826&lt;/a&gt;),
but from a public release perspective, it came first.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ah, but wait! If you followed the timelines
closely back then, you might know that Git and Mercurial almost arrived
at the same time. If we believe Wikipedia, then Git was released April 7th in
2005 whereas Mercurial's initial version was published April 19th. So 12 days are
enough of a head start to lead to a huge success like Git's?&lt;/p&gt;
&lt;p&gt;And what about YUI? Depending on what you count as public release date of
jQuery, YUI even came before jQuery (Wikipedia claims John Resig presented jQuery
in January 2006 at a BarCamp. It also says the initial release was August 26 in
the same year. YUI came February 2006). The jQuery/YUI and Git/Mercurial
timelines are not exactly supporting evidence for this theory.&lt;/p&gt;
&lt;p&gt;I lied. &amp;quot;The earlier one wins&amp;quot; is not the point I was going to make. Yes, the
release date is an important factor, but it is not the deciding one. However, it
helps immensely.&lt;/p&gt;
&lt;p&gt;So what is it then?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-one-with-more-buzz-wins"&gt;
&lt;h2&gt;5) The one with more buzz wins.&lt;/h2&gt;
&lt;p&gt;Plain and simple. Call it PR, call it momentum,
but the core message stays the same. Git
didn't win the race because of its 12-day lead. In the beginning, it got more
users because the name &amp;quot;Linus Torvalds&amp;quot; was behind it. Later, it got even
more popular because of Github. Mercurial on the other hand - well, it didn't
have its own Github. When &lt;a class="reference external" href="https://bitbucket.org/"&gt;Bitbucket&lt;/a&gt; arrived on the
scene, it was already too late and the social pressure to put your project on
Github was too high.&lt;/p&gt;
&lt;p&gt;In the same vein, did you know that Tom Dale + Yehuda Katz &amp;lt; half-a-Jeremy?
Wait, what? Tom and Yehuda are the creators of Ember, Jeremy is the
head behind Backbone. If you add &amp;quot;Team Ember's&amp;quot; karma on Hacker News
you don't even get half of Jeremy's. In other words, Jeremy is way more
active on HN. I can hardly remember a discussion about Backbone where he
didn't pop in and provide positive commentary. Probably he's
just very passionate about his framework, but his words definitely help to
spread the Backbone enthusiasm. What about the Angular team? I am not sure
if they even have usernames on HN.&lt;/p&gt;
&lt;p&gt;I could go an about all of the examples mentioned above and every single one
of them fits this theory. I'll try to keep it short:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rails? Pushed by DHH.&lt;/li&gt;
&lt;li&gt;Django? Way better marketing than Pylons back then. Django's tagline: &amp;quot;The
Web framework for perfectonists with deadlines&amp;quot;. How smooth is that?!&lt;/li&gt;
&lt;li&gt;Pyramid on the other hand? It doesn't even have its own domain but is hidden
within the &lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;Pylons Project&lt;/a&gt;.
(Sorry for that. I very much like Pyramid and it was the main choice
for my side project. But in the PR department, it's lacking.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;jQuery and YUI? The former had John Resig constantly promoting it, whereas
YUI was from a relatively unknown team within Yahoo!. And Yahoo never had the cool reputation that
would have helped. Twitter's Bootstrap? The association with the name &amp;quot;Twitter&amp;quot;
probably would have been enough to make it big - Twitter is young and hip after
all (or used to be, back when Bootstrap was released). But there's more.
Just look at Bootstrap:
The project says it is &amp;quot;Designed and built with all the love in the world&amp;quot;.
There is something about this phrase that really annoys me,
but it delivers a clear message: &amp;quot;We are young, feel-good
programmers and not your standard corporate drones.&amp;quot; They
avoid semicolons in their javascript code, because that's
how the cool kids write javascript these days - score another point for the
young and hip image. &lt;a class="reference external" href="https://twitter.com/fat"&gt;One&lt;/a&gt; of the creators even
has his blog on an xxx-domain. By now, you should
realize one thing: They are really good at marketing and presenting themselves
as the cool guys. Which, I'd argue, has helped their project's success immensely.
(Just to make this clear: While I'm not
a fan of being bludgeoned over the head with the oh-so-hip attitude, the Bootstrap
guys have built something impressive. I have used Bootstrap for multiple projects
and it was a huge time saver. Simply blank out the puddle of hipsterness they
make you wade through.)&lt;/p&gt;
&lt;p&gt;To be honest, this conclusion makes me somewhat sad. I would have preferred
if the reasons for projects growing bigger and more successful were more
technical. Alas, it seems that code plays the smaller role. The
buzz, the presence in the blogosphere, the activity on HackerNews,
the coolness factor seem to count more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-tl-dr"&gt;
&lt;h2&gt;Summary / tl;dr&lt;/h2&gt;
&lt;p&gt;If you create or maintain an open source project and want to make it big:
Generate buzz!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="p-s"&gt;
&lt;h2&gt;P.S.&lt;/h2&gt;
&lt;p&gt;On a more positive note: Instead of playing up the coolness
factor of your project, you and your community should write good
tutorials, blog posts, showcases and pump out regular releases. That way,
the momentum you generate is not based on buzz for buzz's sake but has
actual meaning. That's the right kind of buzz.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;hr class="docutils" /&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hacks.mozilla.org/2013/05/how-to-spread-the-word-about-your-code/"&gt;How to Spread The Word About Your Code&lt;/a&gt; (thanks &lt;a class="reference external" href="http://www.reddit.com/r/programming/comments/1ex541/how_to_make_your_opensource_project_successful/ca4rupk"&gt;dhaffner&lt;/a&gt; on r/programming for the suggestion)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="programming"></category></entry><entry><title>A Jump Start for Learning Python</title><link href="https://codelike.com/blog/2011/07/07/a-jump-start-for-learning-python/" rel="alternate"></link><published>2011-07-07T16:32:00+02:00</published><updated>2011-07-07T16:32:00+02:00</updated><author><name>Martin Stein</name></author><id>tag:codelike.com,2011-07-07:/blog/2011/07/07/a-jump-start-for-learning-python/</id><summary type="html">&lt;p&gt;So you've decided to learn Python. Maybe you've already taken a look at the
&lt;a class="reference external" href="http://python.org/"&gt;Python site&lt;/a&gt;. But where to begin? Are there good books
for learning? Programming exercises? What are essential tools one &lt;em&gt;must&lt;/em&gt; know
about? I've gotten these questions from several interested friends and
colleagues. Each time, I tried …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So you've decided to learn Python. Maybe you've already taken a look at the
&lt;a class="reference external" href="http://python.org/"&gt;Python site&lt;/a&gt;. But where to begin? Are there good books
for learning? Programming exercises? What are essential tools one &lt;em&gt;must&lt;/em&gt; know
about? I've gotten these questions from several interested friends and
colleagues. Each time, I tried to reply with a helpful mail. At some point I
realized that a nice write-up as blog post would serve just as well and allow
other people to benefit, too.&lt;/p&gt;
&lt;p&gt;So, I'd like to help you getting started with Python quickly. But let's be
clear: This post is meant for people who have some experience with
programming and want to get pointers for learning Python. If you are new
to programming, be warned! In that case, this might confuse more than it helps.
That being said, let's go.&lt;/p&gt;
&lt;div class="section" id="which-python-version"&gt;
&lt;h2&gt;Which Python Version?&lt;/h2&gt;
&lt;p&gt;Perhaps you've noticed already: There are two slightly incompatible Python
versions out there:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;2.7&lt;/strong&gt;: The 2.x line has been in active use for years. There are tons
of open source libraries and you can do anything short of flying (wait,
you actually &lt;a class="reference external" href="http://xkcd.com/353/"&gt;can&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3.2&lt;/strong&gt;: This is the new branch, where all future development will take
place. It's still Python goodness all the way down. As a bonus, it improves
a few things and removes some old warts. Unfortunately, that makes it
backwards-incompatible with 2.7. So, &lt;a class="reference external" href="http://python3wos.appspot.com/"&gt;not all of those libraries&lt;/a&gt; for 2.7 work with 3.2 yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which one to start with, then? Go with Python 2.7, if:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you want to use certain libraries &lt;em&gt;right now&lt;/em&gt; and they don't work under
3.x yet.&lt;/li&gt;
&lt;li&gt;you don't know which libraries you need, but it might be lots of different
ones.&lt;/li&gt;
&lt;li&gt;you want to work with a web framework. The two largest frameworks
(&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; and
&lt;a class="reference external" href="http://pylonsproject.org/"&gt;Pyramid/Pylons&lt;/a&gt;) don't operate under 3.x
as of now.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go with Python 3.2, if:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you want to use the language for &lt;em&gt;one&lt;/em&gt; specific task and the library you
need is already ported to Python 3.&lt;/li&gt;
&lt;li&gt;you just want to learn the language itself and there's no immediate
requirement for 3rd party libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When in doubt, pick whichever one - it won't be difficult to switch later.
Already got Python on your system, but don't know which one? Just start
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt; on the command-line and check the version number it says.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-s-the-documentation"&gt;
&lt;h2&gt;Where's the documentation?&lt;/h2&gt;
&lt;p&gt;If you're like me, you want to know about the official docs, because... well,
because they're &lt;em&gt;official&lt;/em&gt; and probably most up-to-date. A first look at the
&lt;a class="reference external" href="http://python.org/doc/"&gt;documentation&lt;/a&gt; might be overwhelming (&amp;quot;Oh
my god, where do I start??&amp;quot;), so here are the most important parts:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;The Python Tutorial (&lt;a class="reference external" href="http://docs.python.org/tutorial/"&gt;2.7&lt;/a&gt; or &lt;a class="reference external" href="http://docs.python.org/3.2/tutorial/"&gt;3.2&lt;/a&gt;). This is a very nice introduction. I
would recommend the first 5 chapters up to &amp;quot;5. Data Structures&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The Library Reference (&lt;a class="reference external" href="http://docs.python.org/library/"&gt;2.7&lt;/a&gt; and &lt;a class="reference external" href="http://docs.python.org/3.2/library/"&gt;3.2&lt;/a&gt;). All the libraries included by default
are described here. As the name implies, this is more of a reference
and less of a learning resource. Still, let me point out three
important sections that you will &lt;em&gt;definitely&lt;/em&gt; need later:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Built-in Functions: These are &lt;em&gt;always&lt;/em&gt; available in your code and highly
useful.&lt;/li&gt;
&lt;li&gt;Built-in Types: Shows the data types in the language (booleans, integers,
lists, ...) and the methods they offer.&lt;/li&gt;
&lt;li&gt;How do you capitalize a string? How to split a string into words? Want
to know, which other string methods are available? Unfortunately, the
string documentation is buried deeply within the library reference:
Click on &amp;quot;5.6 Sequence Types&amp;quot; and then &amp;quot;String Methods&amp;quot;. Oh, the last
link is hidden &lt;em&gt;within&lt;/em&gt; the first big paragraph of text on sequence
types. I wish I knew why this one is so hard to find.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ignore the Library Reference for now, but keep it in mind for later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="books-online"&gt;
&lt;h2&gt;Books Online&lt;/h2&gt;
&lt;p&gt;Of course, there are also many printed books. But to let you jump right in
from your computer, here's a selection of ebooks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/"&gt;Learn Python The Hard Way&lt;/a&gt; by Zed
Shaw. A series of 52 exercises that let/make you do things yourself instead
of just reading them. Very practically oriented (I've heard).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.greenteapress.com/thinkpython/"&gt;Think Python - How to Think Like a Computer Scientist&lt;/a&gt;: Often mentioned as a good
beginner's book that also teaches a bit about programming in general.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.swaroopch.com/notes/Python"&gt;A Byte of Python&lt;/a&gt;: Very
beginner-oriented and easy to start with. I remember this one helped me a
lot in my early Python days, but back then I didn't know about the other
books, so I cannot compare them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-exercises"&gt;
&lt;h2&gt;Python Exercises&lt;/h2&gt;
&lt;p&gt;At some point, only reading tutorials and books gets boring and you might want
to start writing programs. Besides the exercises in the books above, there are
some fun online challenges:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt;: A number of mathematical and algorithmical programming
problems, where you can track your progress nicely with a personal user
account. I like it, but its focus on math does more to teach you algorithms
in general than Python in particular.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pythonchallenge.com"&gt;Python Challenge&lt;/a&gt;: A &amp;quot;programming riddle&amp;quot; in the style of
&lt;a class="reference external" href="http://www.deathball.net/notpron/"&gt;Notpron&lt;/a&gt; aimed to teach Python in the
process. Why I like this very much: It poses challenges in several different
areas (how to do HTTP-requests in Python, image analysis, ...), so you get
a broad look at the language and what it can do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-style-guide"&gt;
&lt;h2&gt;Python Style Guide&lt;/h2&gt;
&lt;p&gt;Should I name my variables in &lt;tt class="docutils literal"&gt;CamelCase&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;lowercase_with_underscore&lt;/tt&gt;?
And what is it about Python's indentation: Do I use 2 spaces? 4 Spaces? Tabs?
What other conventions should I follow in my code? Some people ignore these
questions at first and start coding right away. Coding guidelines distract
them from learning the language itself.&lt;/p&gt;
&lt;p&gt;That is perfectly fine, but it is hard for me to do. When learning a new
language, I need to know about the &amp;quot;right way&amp;quot;. First, it means I don't have
to rewrite my code later and I have consistency right from the start. Second,
the existence and the contents of a style guide reveal something about the
language's culture. If the guide tells you: &amp;quot;Do whatever the hell you want!&amp;quot;
or there is none at all, that says something about the language (probably that
it's C++. Wait, sorry - C++ is the one where there are &lt;a class="reference external" href="http://www.parashift.com/c++-faq-lite/"&gt;several&lt;/a&gt;, &lt;a class="reference external" href="http://yosefk.com/c++fqa/"&gt;contradicting&lt;/a&gt; best practices, which makes me feel guilty
before having written a single line of project code). Third, following the
guide means that I've got one less item to think about during programming.
It gets easier to focus on the actual coding, because I don't need to worry
about pesky style issues. Oh, and last: When everybody writes code
along the same rules, reading other people's code gets so much easier.
So, if you're one of those persons that likes to know about coding guidelines:
Python has exactly one, &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;official style guide&lt;/a&gt; and most Python programmers tend
to adhere to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="libraries-package-management"&gt;
&lt;h2&gt;Libraries/Package Management&lt;/h2&gt;
&lt;p&gt;Sooner or later, you might want to use some of those thousands of Python
libraries. Fortunately, Python has a package management system that makes
things easy for you. Unfortunately, Python has more than one package
management system, that makes things easy for you. There's:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://peak.telecommunity.com/DevCenter/EasyInstall"&gt;EasyInstall&lt;/a&gt;: It's
part of the &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; library, and lots of Python packages tell you to
simply write:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
easy_install SomePackage
&lt;/pre&gt;
&lt;p&gt;But this library is &lt;strong&gt;old&lt;/strong&gt; and only works on Python 2.x. Do not use it
anymore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/distribute"&gt;Distribute&lt;/a&gt;, a fork of the
&lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; library which gives you EasyInstall both on Python 2 &lt;em&gt;and&lt;/em&gt;
3. It also fixes lots of old bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;: The new kid on the block. Also,
the better one. With pip, the syntax is:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install SomePackage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which one, you ask? To keep it short: Use pip! If you are not convinced, read
&lt;a class="reference external" href="http://pypi.python.org/pypi/pip#pip-compared-to-easy-install"&gt;this&lt;/a&gt;.
Ironically, you need setuptools/distribute to install pip. So, here's what you
do:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download &lt;tt class="docutils literal"&gt;distribute_setup.py&lt;/tt&gt; from &lt;a class="reference external" href="http://pypi.python.org/pypi/distribute#installation-instructions"&gt;here&lt;/a&gt; and execute it like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python distribute_setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Download the &lt;a class="reference external" href="https://raw.github.com/pypa/pip/master/contrib/get-pip.py"&gt;get-pip.py&lt;/a&gt; install
script (make sure to save it as 'get-pip.py') and run&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python get-pip.py
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;You're good to go. Use pip for everything else from now on:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install WhateverPackage
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ultimate-playground"&gt;
&lt;h2&gt;The Ultimate Playground&lt;/h2&gt;
&lt;p&gt;Python has an interactive interpreter, that allows you to directly type and
execute code. No compiling necessary, no text editor to write and save your
Python file (if you don't want to). It's great for quickly trying out new
things. In order to start the interpreter, simply run &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; from the
shell of your choice.&lt;/p&gt;
&lt;p&gt;Now, wouldn't it be really nice if that interpreter also had automatic
tab-completion? Enter &lt;a class="reference external" href="http://ipython.scipy.org/moin/"&gt;IPython&lt;/a&gt;, an
enhanced Python shell that gives you goodies like auto-completion, a nice
help system and much more. In order to get it, you need IPython itself and a
working &lt;tt class="docutils literal"&gt;readline&lt;/tt&gt; module for the tab-completion. For Python 2.7, that
means:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ipython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, you need readline. On Linux, you should have it already. On OS X or
Windows, probably not (&lt;a class="reference external" href="http://ipython.org/ipython-doc/stable/html/install/install.html#readline"&gt;according to this&lt;/a&gt;). On Max OS X you therefore
do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install readline
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows, you grab a binary &lt;tt class="docutils literal"&gt;pyreadline&lt;/tt&gt; installer &lt;a class="reference external" href="http://ipython.scipy.org/dist/"&gt;right here&lt;/a&gt; and run it.&lt;/p&gt;
&lt;p&gt;An experimental IPython branch for Python 3 is now available. In that case,
it's best if you read the &lt;a class="reference external" href="http://ipython.scipy.org/moin/Python3"&gt;IPython Python 3 notes&lt;/a&gt; yourself to check out the current
state of things.&lt;/p&gt;
&lt;p&gt;Once you have IPython installed, whenever you want to use the interactive
interpreter you simply use &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-tl-dr"&gt;
&lt;h2&gt;Summary / tl;dr&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install Python or check which version you already have installed.&lt;/li&gt;
&lt;li&gt;Install &lt;tt class="docutils literal"&gt;distribute&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; for Python (&lt;a class="reference internal" href="#libraries-package-management"&gt;details here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;If you're on Python 2.7, grab &lt;tt class="docutils literal"&gt;IPython&lt;/tt&gt; (see &lt;a class="reference internal" href="#the-ultimate-playground"&gt;The Ultimate Playground&lt;/a&gt;
above)&lt;/li&gt;
&lt;li&gt;Whooo, you can actually start. Do one or more of the following:&lt;ul&gt;
&lt;li&gt;Take a look at the official Python Tutorial (up to section 5)&lt;/li&gt;
&lt;li&gt;Check out one of the &lt;a class="reference internal" href="#books-online"&gt;recommended ebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;start coding (&lt;a class="reference external" href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt;, or &lt;a class="reference external" href="http://www.pythonchallenge.com"&gt;Python Challenge&lt;/a&gt;, or little
tools for yourself, or ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If anything in this post was particularly helpful (or not helpful at all),
just send a mail. I'd be happy to improve parts or point out further
things.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="python"></category></entry></feed>